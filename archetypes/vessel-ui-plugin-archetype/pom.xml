<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>io.committed.vessel</groupId>
  <artifactId>vessel-ui-plugin-archetype</artifactId>
  <version>0.1.0</version>
  <name>Vessel UI Plugin</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.version>1.8</java.version>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <nodejs.version>v8.9.0</nodejs.version>
    <yarn.version>v1.3.2</yarn.version>

    <!-- Versions: These should largely match the Spring Boot version -->
    <lombok.version>1.16.18</lombok.version>
    <spring-boot.version>2.0.0.M5</spring-boot.version>
    <maven-shade.version>3.1.0</maven-shade.version>
    <graphql-java.version>4.2</graphql-java.version>
    <graphql-spqr.version>0.9.3</graphql-spqr.version>
    <spring-data-elasticsearch.version>3.0.0.RELEASE</spring-data-elasticsearch.version>
    <spring-security.version>5.0.0.M5</spring-security.version>
    <h2.version>1.4.196</h2.version>
    <reactor.version>3.1.0.RELEASE</reactor.version>
    <guava.version>23.3-jre</guava.version>
  </properties>

  <dependencies>
    <!-- Every plugin will need these -->
    <dependency>
      <groupId>io.committed.vessel</groupId>
      <artifactId>vessel-extensions</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>
    <dependency>
      <groupId>io.leangen.graphql</groupId>
      <artifactId>spqr</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
    </dependency>
    <dependency>
      <groupId>io.projectreactor</groupId>
      <artifactId>reactor-core</artifactId>
      <version>${reactor.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
      <version>${spring-boot.version}</version>
    </dependency>
  </dependencies>

  <dependencyManagement>
    <!-- Anything included by the framework should by in the provided scope, 
      as we don't need a second copy! -->
    <dependencies>
      <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>${lombok.version}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
        <version>${spring-boot.version}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-webflux</artifactId>
        <version>${spring-boot.version}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-core</artifactId>
        <version>${spring-security.version}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-config</artifactId>
        <version>${spring-security.version}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-webflux</artifactId>
        <version>${spring-security.version}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
        <version>${spring-boot.version}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <version>${h2.version}</version>
        <scope>provided</scope>
      </dependency>
      <!-- TODO: Do we want this type of thing -->
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>
        <version>${spring-boot.version}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework.data</groupId>
        <artifactId>spring-data-elasticsearch</artifactId>
        <version>${spring-data-elasticsearch.version}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <version>${spring-boot.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>com.graphql-java</groupId>
        <artifactId>graphql-java</artifactId>
        <version>${graphql-java.version}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>io.leangen.graphql</groupId>
        <artifactId>spqr</artifactId>
        <version>${graphql-spqr.version}</version>
        <scope>provided</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <plugins>
      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>1.6</version>
        <executions>
        <!-- Install node and yarn locally -->
        <!-- If you are offlien you can configure this to download from an offline server, see below -->
          <execution>
            <id>install node and yarn</id>
            <goals>
              <goal>install-node-and-yarn</goal>
            </goals>
            <phase>generate-resources</phase>
          </execution>
          <!-- Install yarn packages, note we recommend you don't do this for UI developemtn yourself, but its needed for CI -->
          <execution>
            <id>yarn install</id>
            <goals>
              <goal>yarn</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>             
              <arguments>install</arguments>
            </configuration>
          </execution>          
          <!-- Hook up yarn test to maven test -->
          <execution>
            <id>yarn test</id>
            <goals>
              <goal>yarn</goal>
            </goals>
            <phase>test</phase>
            <configuration>             
              <arguments>test:maven</arguments>
            </configuration>
          </execution>
          <!-- Build the web app -->
          <execution>
            <id>yarn build</id>
            <goals>
              <goal>yarn</goal>
            </goals>
            <configuration>
              <arguments>build</arguments>
            </configuration>
            <phase>compile</phase>
          </execution>
        </executions>
        <configuration>
          <nodeVersion>${nodejs.version}</nodeVersion>
          <yarnVersion>${yarn.version}</yarnVersion>
          <workingDirectory>src/main/js</workingDirectory>
          <!-- Pull through common JS environment variables into the Yarn environment -->
          <environmentVariables>
            <NODE_ENV>${NODE_ENV}</NODE_ENV>
            <CI>${CI}</CI>
            <PORT>${PORT}</PORT>
          </environmentVariables>
          <!-- Optional: where to download node and yarn from. -->
          <!-- <nodeDownloadRoot>http://offline_or_proxy/nodejs/</nodeDownloadRoot>  -->
          <!-- <yarnDownloadRoot>http://offline_or_proxy/yarn/</yarnDownloadRoot> -->
        </configuration>
      </plugin>
      <!-- Copy the UI build output to the resources area on the classpath -->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.0.2</version>
        <executions>
          <execution>
            <id>copy-resources</id>
            <!-- Run the copy After the compilation, but before we package the JAR up-->
            <phase>process-classes</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/classes/ui/${project.artifactId}</outputDirectory>
              <resources>          
                <resource>
                  <directory>${basedir}/src/main/js/build</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>
        </executions>
      </plugin>
      <!-- Build fat Jar, with all non-provided dependencies -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>${maven-shade.version}</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>


  <!-- Since you might want a milestone or snapshot release of Spring -->
  <repositories>
    <repository>
      <id>spring-snapshots</id>
      <name>Spring Snapshots</name>
      <url>https://repo.spring.io/snapshot</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>spring-milestones</id>
      <name>Spring Milestones</name>
      <url>https://repo.spring.io/milestone</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
  </repositories>
  <pluginRepositories>
    <pluginRepository>
      <id>spring-snapshots</id>
      <name>Spring Snapshots</name>
      <url>https://repo.spring.io/snapshot</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </pluginRepository>
    <pluginRepository>
      <id>spring-milestones</id>
      <name>Spring Milestones</name>
      <url>https://repo.spring.io/milestone</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>
</project>
  